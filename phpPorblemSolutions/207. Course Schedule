class Solution {

    /**
     * @param Integer $numCourses
     * @param Integer[][] $prerequisites
     * @return Boolean
     */
    function canFinish($numCourses, $prerequisites) {
        $graph = [];
        $this->prepareGraph($graph, $numCourses, $prerequisites);

        $state = array_fill(0, $numCourses, 0);

        for ($i = 0; $i < $numCourses; $i++) {
            if ($this->checkIfThereareClosedCycle($graph, $i, $state)) {
                return false; 
            }
        }

        return true; 
    }

    private function checkIfThereareClosedCycle($graph, $node, &$state) {
        if ($state[$node] == -1) return true;  
        if ($state[$node] == 1) return false; 

       
        $state[$node] = -1;

        foreach ($graph[$node] as $neighbor) {
            if ($this->checkIfThereareClosedCycle($graph, $neighbor, $state)) {
                return true;
            }
        }

         
        $state[$node] = 1;
        return false;
    }

    private function prepareGraph(&$graph, $numCourses, $prerequisites) {
        foreach ($prerequisites as $pair) {
            $graph[$pair[1]][] = $pair[0];
        }
    }
}
