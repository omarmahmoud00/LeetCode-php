/**
 * Definition for a Node.
 * class Node {
 *     public $val = null;
 *     public $neighbors = null;
 *     function __construct($val = 0) {
 *         $this->val = $val;
 *         $this->neighbors = array();
 *     }
 * }
 */

class Solution {
    
    /**
     * @param Node $node
     * @return Node
     */
    function cloneGraph($node) {
        if($node==null) return null;
        $map=[];
       $map[$node->val] = new Node($node->val);
       $stack = new SplStack();
         $stack->push($node);
         $this->cloneGraphDFS($stack,$map);
      return $map[$node->val];


    }

   private function cloneGraphDFS($stack,&$map){
        if($stack==null) return ;

        while(!$stack->isEmpty()){
            $current = $stack->pop();
            foreach($current->neighbors as $neighbor){
                if(!isset($map[$neighbor->val])){
                 $map[$neighbor->val]  = new Node($neighbor->val);
                     
                 $stack->push($neighbor);
                }
               $map[$current->val]->neighbors[] = $map[$neighbor->val];



            }


        }


   } 
}

   


// [
 //   [2,4],
 //   [1,3],
 //   [2,4],
 //   [1,3]
//     ]
