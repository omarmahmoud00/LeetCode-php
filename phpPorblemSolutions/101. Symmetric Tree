/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($val = 0, $left = null, $right = null) {
 *         $this->val = $val;
 *         $this->left = $left;
 *         $this->right = $right;
 *     }
 * }
 */
class Solution {

    /**
     * @param TreeNode $root
     * @return Boolean
     */
    function isSymmetric($root) {
          $leftNode = $root->left;
        $rightNode = $root->right;
        if($leftNode->val!==$rightNode->val) return false;

        return $this->checkNode($leftNode,$rightNode);
         
    }

    private function checkNode($node1,$node2){
        
        if($node1->val!=$node2->val) return false;
        
        
        if ($node1 == null && $node2 == null) {
            return true;
        }
          if ($node1 == null || $node2 == null) return false;


         return   $this->checkNode($node1->left, $node2->right) && 
                                        $this->checkNode($node1->right, $node2->left);
            

    }

}
