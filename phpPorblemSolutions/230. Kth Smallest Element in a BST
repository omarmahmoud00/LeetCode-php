/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($val = 0, $left = null, $right = null) {
 *         $this->val = $val;
 *         $this->left = $left;
 *         $this->right = $right;
 *     }
 * }
 */
class Solution {
    private $count = 0;
    private $result = 0;

    /**
     * @param TreeNode $root
     * @param Integer $k
     * @return Integer
     */
    function kthSmallest($root, $k) {
        $this->traverse($root, $k);
        return $this->result;
    }

    private function traverse($node, $k) {
        if ($node === null || $this->count >= $k) {
            return;
        }
        
        
        $this->traverse($node->left, $k);
        
         
        $this->count++;
        if ($this->count == $k) {
            $this->result = $node->val;
            return;
        }
        
         
        $this->traverse($node->right, $k);
    }
}
