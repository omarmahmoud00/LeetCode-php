/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     public $val = null;
 *     public $left = null;
 *     public $right = null;
 *     function __construct($val = 0, $left = null, $right = null) {
 *         $this->val = $val;
 *         $this->left = $left;
 *         $this->right = $right;
 *     }
 * }
 */
class Solution {
     private $path;
   
    
    /**
     * @param TreeNode $root
     * @return String
     */
    function smallestFromLeaf($root) {
        $this->path = ''; 
        $this->smallestFromLeafRec($root , '');
        return $this->path;
    }

    private function smallestFromLeafRec($root , $path) {
        if ($root == null) return;

 
        $currentPath = chr($root->val + ord('a')) . $path;

        if ($root->left == null && $root->right == null) { 
            if ($currentPath < $this->path || $this->path === '') {
                $this->path = $currentPath;
            }
        }

       
        $this->smallestFromLeafRec($root->left,    $currentPath);
        $this->smallestFromLeafRec($root->right,   $currentPath);
    }
}
