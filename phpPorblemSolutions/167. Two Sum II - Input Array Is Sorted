class Solution {

    /**
     * @param Integer[] $numbers
     * @param Integer $target
     * @return Integer[]
     */
    function twoSum($numbers, $target) {
        $size = count($numbers);
        if($size == 2) {
            return [1, 2];
        }

        // $ans = array();  // Fix here
        $num1 =0;
        $num2 =0;
        for($i=0; $i<$size; $i++){
            $num1 = $i + 1;
            $x = $target - $numbers[$i];
            $result = $this->binarySearchCheck($numbers, $x, $size);
            
            if($result[0] == true){
                if($result[1] != $i){
                    $num2 = $result[1] + 1;  
                    return [$num1,$num2];
                } else {
                    if(isset($numbers[$result[1]+1]) && $numbers[$result[1]+1] == $x) {
                        $num2 = $result[1] + 2;
                    } else {
                        $num2 = $result[1] + 1;   
                    }
                    // return $ans;
                    return [$num1,$num2];

                }
            }
        }
                    return [$num1,$num2];
        // return $ans;   
    }

    private function binarySearchCheck($arr, $target, $size) {
        $low = 0;
        $high = $size - 1;
        
        while ($low <= $high) {
            $mid = floor(($low + $high) / 2);

            if($arr[$mid] == $target) {
                return [true, $mid];
            }

            if ($target < $arr[$mid]) {
                $high = $mid - 1;
            } else {
                $low = $mid + 1;
            }
        }
        return [false, -1001];
    }
}
